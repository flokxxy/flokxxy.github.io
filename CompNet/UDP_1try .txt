// UDP-эхо сервер
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
#include <windows.h>
#include <string>
#include <iostream>
#pragma comment(lib, "Ws2_32.lib")
#pragma warning(disable: 4996)
using namespace std;
#define PORT 666    // порт сервера
#define sHELLO "Hello, STUDENT\n"

struct Person
{
    int grades[4];  //оценки
    char name[500];  //имя
}B;

int main() {
    setlocale(LC_ALL, "RUS");
    char buff[1024];
    int answer = -1;
    cout << "UDP DEMO ECHO-SERVER\n";
    // шаг 1 - подключение библиотеки 
    if (WSAStartup(0x202, (WSADATA*)&buff[0])) //инициализация библиотеки Winsock
    {
        //инициализация не удалась, выводится сообщение об ошибке и программа завершается
        cout << "WSAStartup error: " << WSAGetLastError();
        return -1;
    }

    // шаг 2 - создание сокета
    SOCKET Lsock; //создаем сокет
    Lsock = socket(AF_INET, SOCK_DGRAM, 0);
    if (Lsock == INVALID_SOCKET) { //Если создание сокета не удалось, выводится сообщение об ошибке и программа завершается.
        cout << "SOCKET() ERROR: " << WSAGetLastError();
        WSACleanup();
        return -1;
    }

    // шаг 3 - связывание сокета с локальным адресом 
    sockaddr_in Laddr; //создание структуры, которая содержит информацию о локальном адресе сервера
    Laddr.sin_family = AF_INET;
    Laddr.sin_addr.s_addr = INADDR_ANY;   // или 0 (любой IP адрес)
    Laddr.sin_port = htons(PORT);
    if (bind(Lsock, (sockaddr*)&Laddr, sizeof(Laddr)))//сокет связывается с локальным адресом при помощи bind
    {//Если связывание не удалось, выводится сообщение об ошибке и программа завершается.
        cout << "BIND ERROR:" << WSAGetLastError();
        closesocket(Lsock);
        WSACleanup();
        return -1;
    }

    // шаг 4 обработка пакетов, присланных клиентами
    while (1) {
        sockaddr_in    Caddr;
        int Caddr_size = sizeof(Caddr);
        int bsize = recvfrom(Lsock, (char*)&B, sizeof(B), 0, (sockaddr*)&Caddr, &Caddr_size); //функция recvfrom для приема данных от клиента
        if (bsize == SOCKET_ERROR) //Если прием данных не удался, выводится сообщение об ошибке.
            cout << "RECVFROM() ERROR:" << WSAGetLastError();
        // Определяем IP-адрес клиента и прочие атрибуты

        HOSTENT* hst;
        hst = gethostbyaddr((char*)&Caddr.sin_addr, 4, AF_INET); //определяется IP-адрес клиента и другие атрибуты


        cout << "NEW DATAGRAM!" << endl; //выводится информация о клиенте, включая его имя, IP-адрес и порт.
        cout << ((hst) ? hst->h_name : "Unknown host\n") << endl;
        cout << inet_ntoa(Caddr.sin_addr) << endl;
        cout << ntohs(Caddr.sin_port) << endl;


        cout << "Client => Server:";
        cout << "Name:" << B.name << endl;
        cout << "Grades: ";
        for (int i = 0; i < 4; i++)
            cout << B.grades[i] << " ";
        cout << endl;
       

        //задолжности
        if (B.grades[0] == 2) answer = 2;
        else if (B.grades[1] == 2) answer = 3;
        else if (B.grades[2] == 2) answer = 4;
        else if (B.grades[3] == 2) answer = 5;
        else if (B.grades[0] == 2 && B.grades[1] == 2 && B.grades[2] == 2 && B.grades[3] == 2) answer = 13;
        //нет степендии
        else if (B.grades[0] == 3) answer = 6;
        else if (B.grades[1] == 3) answer = 7;
        else if (B.grades[2] == 3) answer = 8;
        else if (B.grades[3] == 3) answer = 9;
        else if (B.grades[0] == 3 && B.grades[1] == 3 && B.grades[2] == 3 && B.grades[3] == 3) answer = 12;
        //обычная степендия
        else if (B.grades[0] == 5 && B.grades[1] == 5 && B.grades[2] == 5 && B.grades[3] == 5) answer = 10;
        else  answer = 11;
        switch (answer) {
        case 2: {cout << "долг по программированию\n"; break; }
        case 3: {cout << "долг по Математический анализ\n"; break; }
        case 4: {cout << "долг по Дифференциальные уравнения\n"; break; }
        case 5: {cout << "долг по Веб\n"; break; }
        case 6: {cout << "нет стипендии из-за программированию\n"; break; }
        case 7: {cout << "нет стипендии из-за Математический анализ\n"; break; }
        case 8: {cout << "нет стипендии из-за Дифференциальные уравнения\n"; break; }
        case 9: {cout << "нет стипендии из-за Веб\n"; break; }
        case 10: {cout << "повышенная стипендия"; break; }
        case 11: {cout << "обычная стипендия\n"; break; }
        case 12: {cout << "нет стипендии\n"; break; }
        case 13: {cout << "все очень плохо\n"; break; }

        case -1: {cout << "Error, server sent wrong data"; }
        }
        // посылка датаграммы клиенту
        sendto(Lsock, (char*)&answer, sizeof(answer), 0, (sockaddr*)&Caddr, sizeof(Caddr));
    }      return 0;
}


// пример UDP-клиента
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <winsock2.h>
#include <string>
#include <windows.h>
#include <iostream>
#pragma comment(lib, "ws2_32.lib") //эти директивы используются для связи с библиотекой ws2_32.lib
#pragma warning(disable: 4996)
using namespace std;
#define PORT 666 //порт сервера
#define SERVERADDR "127.0.0.1" // IP-адрес сервера

struct Person
{
    int grades[4];  //оценки
    char name[500];  //имя
} A;

int main()
{
    setlocale(LC_ALL, "RUS");
    char buff[10 * 1014]; // создается буфер buff размером 10 * 1014 для обработки данных.
    int answer = -1;
    cout << "UDP Demo Client\nType quit to quit \n"; //


    // Шаг 1 - иницилизация библиотеки Winsocks
    if (WSAStartup(0x202, (WSADATA*)&buff))
    {
        cout << "WSASTARTUP ERROR: " << WSAGetLastError() << "\n";
        return -1;
    }


    // Шаг 2 - открытие сокета
    SOCKET my_sock = socket(AF_INET, SOCK_DGRAM, 0);//Создается сокет
    if (my_sock == INVALID_SOCKET) {
        cout << "SOCKET() ERROR: " << WSAGetLastError() << "\n";
        WSACleanup();
        return -1;
    }

    // Шаг 3 - обмен сообщений с сервером
    HOSTENT* hst;
    sockaddr_in Daddr;
    Daddr.sin_family = AF_INET;
    Daddr.sin_port = htons(PORT);

    // определение IP-адреса узла
    if (inet_addr(SERVERADDR))
        Daddr.sin_addr.s_addr = inet_addr(SERVERADDR);
    else
        if (hst = gethostbyname(SERVERADDR))
            Daddr.sin_addr.s_addr = ((unsigned long**)
                hst->h_addr_list)[0][0];
        else {
            cout << "Unknown Host: " << WSAGetLastError() << "\n";
            closesocket(my_sock);
            WSACleanup();
            return -1;
        }
    while (1) {//обмен сообщениями с сервером.
        // чтение сообщения с клавиатуры
        cout << "Server <= Client:" << endl;
        /*string SS;
        getline(cin, SS);
        if (SS == "quit") break;*/
        cout << "System: Введите данные: Фамилия Оценки(4 штуки)" << endl;
        cout << "you:";
        cin >> A.name;
        cout << "input marks for " << endl;
        cout << " Программирование || Математический анализ | Дифференциальные уравнения | Веб " << endl;
        for (int i = 0; i < 4; i++)
            cin >> A.grades[i];

        // Передача сообщений на сервер
        sendto(my_sock, (char*)&A, sizeof(A), 0, (sockaddr*)&Daddr, sizeof(Daddr)); //Клиент отправляет сообщение серверу

        // Прием сообщения с сервера
        sockaddr_in SRaddr; //Это объявление структуры SRaddr, которая содержит информацию об адресе сервера, включая IP-адрес и порт.
        int SRaddr_size = sizeof(SRaddr); //определяется размер структуры
        int n = recvfrom(my_sock, (char*)&answer, sizeof(answer), 0, (sockaddr*)&SRaddr, &SRaddr_size); //Клиент получает сообщение от сервера
        if (n == SOCKET_ERROR) {
            cout << "RECVFROM() ERROR:" << WSAGetLastError() << "\n"; //проверка на ошибку при приеме сообщения
            closesocket(my_sock);
            WSACleanup();  
            return -1;
        }
        buff[n] = '\0'; //устанавливается завершающий нулевой символ в буфере buff, чтобы обозначить конец принятых данных.

        // Вывод принятого с сервера сообщения на экран
        cout << "Server => Client:";
        switch (answer) {
        case 2: {cout << "долг по программированию\n"; break; }
        case 3: {cout << "долг по Математический анализ\n"; break; }
        case 4: {cout << "долг по Дифференциальные уравнения\n"; break; }
        case 5: {cout << "долг по Веб\n"; break; }
        case 6: {cout << "нет стипендии из-за программированию\n"; break; }
        case 7: {cout << "нет стипендии из-за Математический анализ\n"; break; }
        case 8: {cout << "нет стипендии из-за Дифференциальные уравнения\n"; break; }
        case 9: {cout << "нет стипендии из-за Веб\n"; break; }
        case 10: {cout << "повышенная стипендия"; break; }
        case 11: {cout << "обычная стипендия\n"; break; }
        case 12: {cout << "нет стипендии\n"; break; }
        case 13: {cout << "все очень плохо\n"; break; }

        case -1: {cout << "Error, server sent wrong data"; }
        }
    }
    // шаг последний - выход
    closesocket(my_sock);
    WSACleanup();
    return 0;
}

